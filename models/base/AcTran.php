<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3acc\models\base;

use Yii;

/**
 * This is the base-model class for table "ac_tran".
 *
 * @property string $id
 * @property integer $period_id
 * @property string $accounting_date
 * @property integer $debit_rec_acc_id
 * @property integer $credit_rec_acc_id
 * @property string $amount
 * @property string $notes
 * @property integer $t_user_id
 * @property string $t_datetime
 *
 * @property \d3acc\models\AcPeriod $period
 * @property \d3acc\models\AcRecAcc $debitRecAcc
 * @property \d3acc\models\AcRecAcc $creditRecAcc
 * @property string $aliasModel
 */
abstract class AcTran extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'ac_tran';
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['period_id', 'accounting_date', 'debit_rec_acc_id', 'credit_rec_acc_id', 'amount', 't_user_id', 't_datetime'], 'required'],
            [['period_id', 'debit_rec_acc_id', 'credit_rec_acc_id', 't_user_id'], 'integer'],
            [['accounting_date', 't_datetime'], 'safe'],
            [['amount'], 'number'],
            [['notes'], 'string'],
            [['period_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3acc\models\AcPeriod::className(), 'targetAttribute' => ['period_id' => 'id']],
            [['debit_rec_acc_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3acc\models\AcRecAcc::className(), 'targetAttribute' => ['debit_rec_acc_id' => 'id']],
            [['credit_rec_acc_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3acc\models\AcRecAcc::className(), 'targetAttribute' => ['credit_rec_acc_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('poker', 'ID'),
            'period_id' => Yii::t('poker', 'Period'),
            'accounting_date' => Yii::t('poker', 'Accountig Date'),
            'debit_rec_acc_id' => Yii::t('poker', 'Debit account'),
            'credit_rec_acc_id' => Yii::t('poker', 'Credit account'),
            'amount' => Yii::t('poker', 'Amount'),
            'notes' => Yii::t('poker', 'Notes'),
            't_user_id' => Yii::t('poker', 'User'),
            't_datetime' => Yii::t('poker', 'Date'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'period_id' => Yii::t('poker', 'Period'),
            'accounting_date' => Yii::t('poker', 'Accountig Date'),
            'debit_rec_acc_id' => Yii::t('poker', 'Debit account'),
            'credit_rec_acc_id' => Yii::t('poker', 'Credit account'),
            'amount' => Yii::t('poker', 'Amount'),
            'notes' => Yii::t('poker', 'Notes'),
            't_user_id' => Yii::t('poker', 'User'),
            't_datetime' => Yii::t('poker', 'Date'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPeriod()
    {
        return $this->hasOne(\d3acc\models\AcPeriod::className(), ['id' => 'period_id'])->inverseOf('acTrans');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDebitRecAcc()
    {
        return $this->hasOne(\d3acc\models\AcRecAcc::className(), ['id' => 'debit_rec_acc_id'])->inverseOf('acTrans');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreditRecAcc()
    {
        return $this->hasOne(\d3acc\models\AcRecAcc::className(), ['id' => 'credit_rec_acc_id'])->inverseOf('acTrans0');
    }




}
